name: Integration Tests MacOS
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string

jobs:
  integration-tests-macos:
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    strategy:
      matrix:
        runner: ${{ fromJson(inputs.matrix) }}
    env:
      RUNNER_TYPE: ${{ matrix.runner[0] }}
      TRITON_BUILD_WITH_CLANG_LLD: "TRUE"
    steps:
      - name: Checkout CPU Plugin
        uses: actions/checkout@v5
      - name: Fetch Triton upstream Commit Hash
        shell: bash
        run: |
          TRITON_COMMIT_HASH="$(cat triton.txt)"
          echo "Found Triton commit hash: ${TRITON_COMMIT_HASH}"
          echo "triton_commit_hash=${TRITON_COMMIT_HASH}" >> ${GITHUB_ENV}
      - name: Checkout Triton upstream repo
        uses: actions/checkout@v5
        with:
          repository: triton-lang/triton
          path: triton
          submodules: true
          ref: ${{ env.triton_commit_hash }}
      - name: Install brew dependencies
        run: |
          brew update
          brew install ccache llvm@20 lld coreutils libomp boost
      - name: Compute cache keys
        id: cache-key
        run: |
          triton_file="${GITHUB_WORKSPACE}/triton.txt"

          # Check if files exist before proceeding
          if [[ ! -f "$triton_file" ]]; then
            echo "Error: Required dependency files are missing."
            exit 1
          fi

          # Process the files if they exist
          echo "triton=$(cat $triton_file | cut -c 1-8)" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          # Note that we cannot use environment variables here given there is
          # no shell to interpret them in the paths.
          path: |
            ~/.triton/llvm
            ~/.triton/nvidia
            ~/.triton/json
          key: ${{ runner.os }}-${{ runner.arch }}-triton-${{ steps.cache-key.outputs.triton }}
      - name: Inspect cache directories
        run: |
          mkdir -p ~/.triton
          du -h -d 1 ~/.triton

          mkdir -p ~/.ccache
          du -h -d 1 ~/.ccache
      - name: Update PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "/opt/homebrew/opt/llvm/bin" >> $GITHUB_PATH
      - name: Create venv
        run: |
          python3 -m venv ~/.venv
          source ~/.venv/bin/activate
          python3 -m pip install --upgrade pip
      - name: Install torch
        run: |
          source ~/.venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install torch==2.8.0 --index-url https://download.pytorch.org/whl/test/cpu
          pip freeze
      - name: Install Triton
        env:
          TRITON_BUILD_WITH_O1: "true"
          # macos-latest has 3 vcpus and 7GB DRAM, to save memory we limit the number of jobs to 3
          # https://docs.github.com/en/actions/reference/github-hosted-runners-reference#standard-github-hosted-runners-for-public-repositories
          MAX_JOBS: 3
          # Add elapsed time in seconds to ninja status to monitor where build stalls
          NINJA_STATUS: "[%f/%t, %es elapsed] "
        working-directory: ./triton
        run: |
          source ~/.venv/bin/activate
          nproc
          echo "PATH is '$PATH'"
          ccache --zero-stats
          export PATH="/opt/homebrew/opt/llvm@20/bin:$PATH"
          export CC="/opt/homebrew/opt/llvm@20/bin/clang"
          export CXX="/opt/homebrew/opt/llvm@20/bin/clang++"
          export CXXFLAGS="-stdlib=libc++"
          export LDFLAGS="-L/opt/homebrew/opt/llvm@20/lib"
          which clang++
          clang++ --version
          TRITON_PLUGIN_DIRS=${GITHUB_WORKSPACE} make dev-install
      - name: Apply Triton patches
        working-directory: ./triton
        run: |
          git apply -v ${GITHUB_WORKSPACE}/.github/patches/*.patch
      - name: CCache Stats
        run: ccache --print-stats
      - name: Run lit tests
        working-directory: ./triton
        run: |-
          source ~/.venv/bin/activate
          make test-lit
          export BUILD_DIR="$(cd python; python -c 'from build_helpers import get_cmake_dir; print(get_cmake_dir())')"
          ninja -C ${BUILD_DIR} check-triton-cpu-lit-tests
      - name: Run python tests on CPU
        working-directory: ./triton
        run: |
          source ~/.venv/bin/activate
          TRITON_CPU_NUM_WARPS=4 CC=g++ python -m pytest --device "cpu" python/test/unit/language/test_core.py -k "(test_reduce1d or test_load_store_same_ptr) and not test_reduce1d[1-sum-float16-512]"
      - name: Run tutorial 01 on CPU
        working-directory: ./triton
        run: |
          source ~/.venv/bin/activate
          # MPLBackend disables matplotlib from popping up the graph and hanging
          MPLBACKEND=Agg CC=g++ python python/tutorials/01-vector-add.py
      - name: Run C++ unittests
        working-directory: ./triton
        run: |
          source ~/.venv/bin/activate
          make test-cpp
      - name: Inspect cache directories
        run: |
          mkdir -p ~/.triton
          du -h -d 1 ~/.triton

          mkdir -p ~/.ccache
          du -h -d 1 ~/.ccache
